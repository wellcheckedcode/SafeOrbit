Role: You are an expert full-stack web developer. Your task is to build a complete, single-page web application from scratch based on the following requirements.Project Goal:Create a web application called "SafeZone Mapper" that visualizes crime data on an interactive map to help users understand the safety levels of different locations within a city. The primary goal is to provide a clear, intuitive idea of safer locations based on historical crime data.Core Features & Functionality:Interactive Map:The main UI element must be a full-screen interactive map. Use the Leaflet.js library for this.Center the map initially on Lucknow, Uttar Pradesh, India (Coordinates: 26.8467° N, 80.9462° E).The map should display a heatmap layer representing the density of crime incidents. Hotter colors (red, orange) indicate higher crime density, while cooler colors (green, blue) indicate lower density.Data Source (Crucial):Since we don't have a live API to the National Crime Records Bureau, you must create a realistic mock JSON dataset of at least 100 crime incidents.Store this mock data directly within the JavaScript code as a variable.Each crime incident object in the dataset must have the following structure:{
  "id": 1,
  "lat": 26.8500,
  "lng": 80.9500,
  "type": "Theft",
  "severity": 3,
  "date": "2024-08-15",
  "description": "A purse was snatched near Hazratganj market."
}
Include a variety of type (e.g., "Theft", "Assault", "Burglary", "Vandalism", "Robbery") and severity (a number from 1 to 10, where 10 is most severe).Distribute these data points realistically across different neighborhoods of Lucknow.Search and Location Analysis:Include a search bar at the top of the map. When a user types an address or neighborhood and hits enter, the map should pan to that location.When the map view changes (either by panning, zooming, or searching), a "Safety Score" for the visible area should be calculated and displayed.Safety Score Calculation:Create a function calculateSafetyScore(crimesInView).This function will take an array of crime incidents currently visible on the map.The score should be calculated based on the number and severity of crimes. A simple algorithm would be to sum the severity of all visible crimes and normalize it to a score out of 100 (where 100 is safest).Formula idea: Safety Score = 100 - (Sum of severities / Number of crimes * 10). Adjust the formula as needed for a balanced score.Display this score clearly in a card or overlay on the map, along with a qualitative rating (e.g., "Very Safe", "Moderate", "Use Caution").Filtering:Add a simple filtering panel. Users should be able to filter the crimes displayed on the map by:Crime Type (using checkboxes for each type).Date Range (a simple dropdown for "Last 30 days", "Last 6 months", "All Time").UI/UX & Design:Styling: Use Tailwind CSS for all styling. Aim for a clean, modern, and professional look. The app should be fully responsive and work well on mobile devices.Layout:The map should be the background/main element.The search bar should be prominently placed at the top-center.The "Safety Score" display card should be in a corner (e.g., top-right) and should not obstruct the view too much.The filter panel could be a collapsible sidebar or a modal that opens when a "Filter" button is clicked.Interactivity:When a user clicks on a "hot" area of the heatmap, pop up a small summary showing the types of crimes most common in that area.Technical Specifications:File Structure: Create a single index.html file. All CSS (from Tailwind CDN and custom styles) and all JavaScript code (including the mock data) must be included within this one file using <style> and <script> tags.Libraries:Tailwind CSS: Include via CDN.Leaflet.js: For the map, included via CDN.Leaflet.heat: A Leaflet plugin for the heatmap layer, included via CDN.No Backend: This is a purely front-end application. No server-side code or database is required.Please generate the complete code for the index.html file that implements all the features described above.